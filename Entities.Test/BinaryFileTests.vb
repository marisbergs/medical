'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports Entities
Imports System.IO

Imports System.Diagnostics




<TestClass()> _
Public Class BinaryContentTests


    Private testContextInstance As TestContext

    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = Value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    <ClassInitialize()> _
    Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
        Debug.Listeners.Add(New TextWriterTraceListener(Console.Out))
        Debug.AutoFlush = True
    End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region

    Private Sub TestSingleFileCompress(ByVal target As BinaryContent, ByVal fileName As String)

        Dim inputStream As New FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read)

        Debug.Write(String.Format("File = {0} size = {1}", fileName, inputStream.Length))

        target.SetFromStream(inputStream)
        inputStream.Seek(0, SeekOrigin.Begin)
        Dim msg As String = Helper.CompareStreams(inputStream, target.GetAsStream)
        If msg <> "" Then
            Assert.Fail(msg)
        End If
    End Sub

    <TestMethod()> _
    Public Sub CompressDecompressTest()
        Dim target As BinaryContent = New BinaryContent

        TestSingleFileCompress(target, "Entities.Test.dll")
        TestSingleFileCompress(target, "Entities.dll")
        TestSingleFileCompress(target, "Core.dll")

    End Sub

    <TestMethod()> _
    Public Sub PersistenceTest()
        Helper.StartTransaction()
        Try
            Dim target As BinaryContent = New BinaryContent
            Dim inputStream As New FileStream("Entities.Test.dll", FileMode.Open, FileAccess.Read, FileShare.Read)
            target.SetFromStream(inputStream)

            Using session As Core.Dal.ISession = Core.Dal.Manager.Instance.OpenSession()
                session.Save(target)
                session.Commit()
            End Using

            Using session As Core.Dal.ISession = Core.Dal.Manager.Instance.OpenSession()
                target = session.Get(Of BinaryContent)(target.Id)
                inputStream.Seek(0, SeekOrigin.Begin)
                ' Tikai pie target.GetAsStream nostrādā lazy loadings, tāpēc tam jānotiek sessijā.
                Dim msg As String = Helper.CompareStreams(inputStream, target.GetAsStream)
                If msg <> "" Then
                    Assert.Fail(msg)
                End If
            End Using
        Finally
            Helper.AbortTransaction()
        End Try
    End Sub

End Class

<TestClass()> _
Public Class BinaryFileTests


    Private testContextInstance As TestContext

    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()> _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    '    Debug.Listeners.Add(New TextWriterTraceListener(Console.Out))
    '    Debug.AutoFlush = True
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region

    <TestMethod()> _
    Public Sub PersistenceTest()
        Helper.StartTransaction()
        Try
            Dim expected As BinaryFile
            Using session As Core.Dal.ISession = Core.Dal.Manager.Instance.OpenSession()
                expected = New BinaryFile(session)
                expected.Name = "Entities.Test.dll"
                Dim inputStream As New FileStream(expected.Name, FileMode.Open, FileAccess.Read, FileShare.Read)
                expected.Content.SetFromStream(inputStream)

                session.Save(expected)
                session.Commit()
            End Using

            Using session As Core.Dal.ISession = Core.Dal.Manager.Instance.OpenSession()
                Dim actual As BinaryFile = session.Get(Of BinaryFile)(expected.Id)
                Assert.AreNotSame(expected, actual)
                Assert.AreEqual(expected.Name, actual.Name)
                Dim msg As String = Helper.CompareStreams(expected.Content.GetAsStream, actual.Content.GetAsStream)
                If msg <> "" Then
                    Assert.Fail(msg)
                End If
            End Using
        Finally
            Helper.AbortTransaction()
        End Try
    End Sub

    '''<summary>
    '''A test for business constraints
    '''</summary>
    <TestMethod()> _
    Public Sub BusinessConstraintsTest()
        Dim target As New Entities.BinaryFile(Nothing)

        Dim validationResult As Core.Result

        validationResult = Helper.ValidateAndAssertPropertyErrorsCount(target, "Name", 1)
        Helper.AssertExpectedError(validationResult, Core.Err.ValueRequired)

        target.Name = "FileName.ext"
        Helper.ValidateAndAssertNoErrors(target)
    End Sub

    '''<summary>
    '''A test for FileType detection from Name
    '''</summary>
    <TestMethod()> _
    Public Sub FileTypeDetectionTest()
        Dim testData(,) As Object = {{"MyName.DoC", BinaryFileType.Word}, _
                                     {"MyName.rTf", BinaryFileType.Word}, _
                                     {"MyName.xLs", BinaryFileType.Excel}, _
                                     {"MyName.docu", BinaryFileType.Other}, _
                                     {"MyName.", BinaryFileType.Other}, _
                                     {"MyName", BinaryFileType.Other}}

        Dim target As New Entities.BinaryFile(Nothing)

        Assert.IsNull(target.FileType) ' Nothing if Name is empty

        For i As Integer = LBound(testData) To UBound(testData)
            target.Name = CType(testData(i, 0), String)
            Assert.AreEqual(CType(testData(i, 1), BinaryFileType), target.FileType)
        Next

    End Sub

End Class